/*
 identificadores de dificualtad de los ejercicios
 Facil : üå±
 Intermedia : ‚ö°
 Dificil : üî•

*/

export const ObjetoPractica = [
    {
        id: 1,
        nombre: "Contrase√±a V√°lida",
        dificultad: "F√°cil",
        NumeroEjercicio: "Ejercicio 01",
        NombreFuncion: "contrase√±aValida",
        descripcion: "Escribir una funci√≥n llamada contrasenaValida que reciba un string y retorne true si el string es igual a '2Fj(jjbFsuj' o 'eoZiugBf&g9'. De lo contrario debe retornar false",
        restricciones: [
            "La funci√≥n se debe llamar contrasenaValida.",
            "La funci√≥n debe recibir un string como argumento.",
            "Retorna true si el string es igual a '2Fj(jjbFsuj' o 'eoZiugBf&g9'."
        ],
        soluciones: [
            {
                forma: "1) Primera Solucion",
                explicacion: "En esta soluci√≥n se utiliza un array contrase√±asValidas y el m√©todo includes() para verificar si la contrase√±a es v√°lida. Es m√°s escalable y f√°cil de modificar, ya que se puede agregar o quitar contrase√±as sin cambiar la l√≥gica.",
                metodo: "Funcion includes",
                link: "https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Array/includes",
                codigo: `
                function validarContrase√±a(contrase√±a) {
                    const contrase√±asValidas = ["2Fj(jjbFsuj", "eoZiugBf&g9"];
                    return contrase√±asValidas.includes(contrase√±a);
                }
                `
            },
            {
                forma: "2) Segunda Solucion",
                explicacion: "En esta soluci√≥n utiliza una √∫nica l√≠nea con una expresi√≥n booleana para verificar si la contrase√±a es v√°lida. Es m√°s concisa y directa, retornando true o false sin estructuras adicionales.",
                metodo: "Expresi√≥n Booleana",
                link: "https://www.aulascript.com/lenguaje/objetos/booleanos.htm",
                codigo: `
                function validarContrase√±a(contrase√±a) {
                    return contrase√±a === "2Fj(jjbFsuj" || contrase√±a === "eoZiugBf&g9";
                }
                `
            },
            {
                forma: "3) Tercera Solucion",
                explicacion: "En esta soluci√≥n utiliza una estructura if-else con operador l√≥gico  para hacer la misma verificaci√≥n. Aunque es m√°s expl√≠cita en la l√≥gica, es m√°s larga y menos eficiente.",
                metodo: "Operador l√≥gico ",
                link: "https://lenguajejs.com/javascript/operadores/logicos/",
                codigo: `
                function validarContrase√±a(contrase√±a){
                    const contrase√±aValida = "2Fj(jjbFsuj";
                    const contrase√±aValida2 = "eoZiugBf&g9";
                    if(contrase√±a === contrase√±aValida || contrase√±a === contrase√±aValida2){
                        return true;
                    } else {
                        return false;
                    }
                }
                `
            }
        ],
        CasosPrueba: `
        function contrasenaValida(string)
    
        // Datos de prueba
        console.log(validarContrase√±a("2Fj(jjbFsuj")) // true
        console.log(validarContrase√±a("eoZiugBf&g9")) // true
        console.log(validarContrase√±a("hola")) // false
        console.log(validarContrase√±a("")) // false
        `
    },
    
    {
        id: 2,
        nombre: "Calcular impuestos",
        dificultad: "F√°cil",
        NumeroEjercicio: "Ejercicio 02",
        NombreFuncion: "calcularImpuestos",
        descripcion: "Escribir una funci√≥n llamada calcularImpuestos que reciba dos argumentos num√©ricos edad e ingresos. Si edad es igual o mayor a 18 y los ingresos son iguales o mayores a 1000 debe retornar ingresos * 40%. De lo contrario retornar 0.",
        restricciones: [
            "La funci√≥n se debe llamar calcularImpuestos.",
            "La funci√≥n debe recibir dos argumentos num√©ricos.",
            "Si edad es igual o mayor a 18 y los ingresos son iguales o mayores a 1000 debe retornar ingresos * 40%.",
            "De lo contrario retornar 0."
        ],
        soluciones: [
            {
                forma: "1) Primera Solucion",
                explicacion : "En esta soluci√≥n declara una constante TASA_IMPUESTO para la tasa de impuestos y utiliza una estructura if para verificar las condiciones de edad e ingresos. Es clara, pero un poco m√°s extensa.",
                metodo:"Variables",
                link:"https://ed.team/blog/variables-constantes-y-scope-de-bloque-en-javascript",
                codigo: `
                function calcularImpuestos(edad, ingreso) {
                    const TASA_IMPUESTO = 0.40; // Constante para la tasa de impuestos
                    // Verificar si la persona es mayor de edad y tiene ingresos suficientes
                    if (edad >= 18 && ingreso >= 1000) {
                        return ingreso * TASA_IMPUESTO;
                    } else {
                        return 0;
                    }
                }
                `
            },
            {
                forma: "2) Segunda Solucion",
                explicacion: "En esta soluci√≥n usa un operador ternario para realizar la misma verificaci√≥n en una sola l√≠nea. Es m√°s compacta y f√°cil de leer, retornando directamente el resultado.",
                metodo: "Operador Ternario",
                link:"https://lenguajejs.com/fundamentos/estructuras-de-control/operador-ternario/",
                codigo: `
                function calcularImpuestos(edad, ingresos) {
                    return edad >= 18 && ingresos >= 1000 ? ingresos * 0.4 : 0;
                }
                `
            },
            {
                forma: "3) Tercera Solucion",
                explicacion: "En esta soluci√≥n es similar a la primera, utiliza una estructura if-else para comprobar las condiciones de edad e ingresos. Es m√°s expl√≠cita pero un poco m√°s larga y no usa constantes.",
                metodo:"Condicioanles If-Else",
                link:"https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Statements/if...else",
                codigo: `
                function calcularImpuestos(edad, ingresos) {
                    if (edad >= 18 && ingresos >= 1000) {
                        return ingresos * 0.4;
                    } else {
                        return 0;
                    }
                }
                `
            }
        ],
        CasosPrueba: `
        function calcularImpuestos(edad, ingresos)

        // Casos de prueba
        console.log(calcularImpuestos(18, 1000)); // 400
        console.log(calcularImpuestos(40, 10000)); // 4000
        console.log(calcularImpuestos(17, 5000)); // 0
        console.log(calcularImpuestos(30, 500)); // 0
        `
    },
    {
        id: 3,
        nombre: "√çndice de Masa Corporal (IMC)",
        dificultad: "F√°cil",
        NumeroEjercicio: "Ejercicio 03",
        NombreFuncion: "bmi",
        descripcion: "Escribir una funci√≥n llamada bmi que reciba dos argumentos: peso y altura, y retorne un string con las siguientes posibilidades: 'Bajo de peso' si el BMI < 18.5, 'Normal' si est√° entre 18.5 y 24.9, 'Sobrepeso' si est√° entre 25 y 29.9, 'Obesidad' si es igual o mayor a 30.",
        restricciones: [
          "La funci√≥n se debe llamar bmi.",
          "Debe recibir dos argumentos: peso y altura.",
          "Debe retornar 'Bajo de peso', 'Normal', 'Sobrepeso' o 'Obesidad' seg√∫n el c√°lculo del BMI."
        ],
        soluciones: [
          {
            forma: "1) Primera Soluci√≥n",
            explicacion: "Esta soluci√≥n divide el c√°lculo del BMI y la evaluaci√≥n del mensaje en dos funciones separadas: una para calcular el BMI y otra para retornar el mensaje correspondiente. Luego, la funci√≥n principal bmi coordina ambas.",
            metodo: "Modularizaci√≥n de funciones",
            link: "https://developer.mozilla.org/es/docs/Web/JavaScript/Guide/Functions",
            codigo: `
            // Funci√≥n para calcular el BMI
            function calcularBMI(peso, altura) {
                const bmiResultado = peso / (altura * altura);
                return bmiResultado;
            }
    
            // Funci√≥n para obtener el mensaje seg√∫n el BMI
            function obtenerMensajeBMI(bmiResultado) {
                let mensajeResultado = "";
                if (bmiResultado < 18.5) {
                    mensajeResultado = "Bajo de peso";
                } else if (bmiResultado >= 18.5 && bmiResultado <= 24.9) {
                    mensajeResultado = "Normal";
                } else if (bmiResultado >= 25 && bmiResultado <= 29.9) {
                    mensajeResultado = "Sobrepeso";
                } else if (bmiResultado >= 30) {
                    mensajeResultado = "Obesidad";
                } else {
                    mensajeResultado = "Valor no v√°lido";
                }
                return mensajeResultado;
            }
    
            // Funci√≥n principal
            function bmi(peso, altura) {
                const bmiResultado = calcularBMI(peso, altura);
                return obtenerMensajeBMI(bmiResultado);
            }
            `
          }
        ],
        CasosPrueba: `
        function bmi(peso, altura)

        // Datos de prueba
        console.log(bmi(65, 1.8)); // "Normal"
        console.log(bmi(72, 1.6)); // "Sobrepeso"
        console.log(bmi(52, 1.75)); // "Bajo de peso"
        console.log(bmi(135, 1.7)); // "Obesidad"
        `
      },
      {
        id: 4,
        nombre: "Imprimir Arreglo",
        dificultad: "F√°cil",
        NumeroEjercicio: "Ejercicio 04",
        NombreFuncion: "imprimirArreglo",
        descripcion: "Escribir una funci√≥n llamada imprimirArreglo que reciba un arreglo e imprima cada elemento en una l√≠nea aparte.",
        restricciones: [
            "La funci√≥n se debe llamar imprimirArreglo.",
            "La funci√≥n debe recibir un arreglo de elementos como argumento."
        ],
        soluciones: [
            {
                forma: "1) Primera Solucion",
                explicacion: "Esta soluci√≥n utiliza el m√©todo forEach para recorrer el array recibido y utilizar console.log para imprimir cada elemento por separado.",
                metodo: "M√©todo forEach",
                link: "https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach",
                codigo: `
                function imprimirArreglo(...elementos) { 
                    elementos.forEach(elemento => {
                        console.log(elemento);
                    });
                }
                `
            }
        ],
        CasosPrueba: `
         function imprimirArreglo(arreglo)

        // c√≥digo de prueba
        imprimirArreglo(1, "Hola", 2, "Mundo");
        // 1
        // Hola
        // 2
        // Mundo
        `
    },
    {
        id: 5,
        nombre: "Likes Convertidos",
        dificultad: "Intermedio",
        NumeroEjercicio: "Ejercicio 05",
        NombreFuncion: "likes",
        descripcion: "Escribir una funci√≥n llamada likes que reciba un n√∫mero y retorne un string en formato 'K' para miles y 'M' para millones.",
        restricciones: [
            "La funci√≥n se debe llamar likes.",
            "La funci√≥n debe recibir un n√∫mero como argumento.",
            "Retornar el n√∫mero en formato 'K' para miles y 'M' para millones si aplica.",
            "Si el n√∫mero es menor a 1000, retornar el n√∫mero tal como est√° pero convertido en string."
        ],
        soluciones: [
            {
                forma: "1) Primera Solucion",
                explicacion: "Esta soluci√≥n convierte el n√∫mero a string y luego utiliza la longitud del string para determinar si debe devolver el n√∫mero como est√° o aplicarle el formato K o M seg√∫n corresponda.",
                metodo: "Manipulaci√≥n de strings",
                link: "https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/String",
                codigo: `
                // Funci√≥n para convertir el n√∫mero a string
                function ConvertirString(numero) {
                    return numero.toString();
                }
    
                // Funci√≥n para convertir el n√∫mero en formato K o M
                function likesConvertidor(like) {
                    let ResultadoLikes = "";
                    let length = like.length;
    
                    if (length <= 3) {
                        ResultadoLikes = like;
                    } else if (length === 4) {
                        ResultadoLikes = like[0] + "K";
                    } else if (length === 5) {
                        ResultadoLikes = like[0] + like[1] + "K";
                    } else if (length === 6) {
                        ResultadoLikes = like[0] + like[1] + like[2] + "K";
                    } else if (length >= 7) {
                        ResultadoLikes = like[0] + like[1] + "M";
                    }
    
                    return ResultadoLikes;
                }
    
                // Funci√≥n principal
                function likes(NumberLike) {
                    let likeString = ConvertirString(NumberLike);
                    return likesConvertidor(likeString);
                }
                `
            }
        ],
        CasosPrueba: `
        function likes(NumberLike)

        // c√≥digo de prueba
        console.log(likes(983)); // "983"
        console.log(likes(1900)); // "1K"
        console.log(likes(54000)); // "54K"
        console.log(likes(120800)); // "120K"
        console.log(likes(25222444)); // "25M"
        `
    },
    {
        id: 6,
        nombre: "FizzBuzz",
        dificultad: "Intermedia",
        NumeroEjercicio: "Ejercicio 06",
        NombreFuncion: "fizzBuzz",
        descripcion: "Escribir una funci√≥n llamada fizzBuzz que reciba un n√∫mero y retorne un string basado en si es m√∫ltiplo de 3, 5, o ambos.",
        restricciones: [
            "La funci√≥n se debe llamar fizzBuzz.",
            "La funci√≥n debe recibir un n√∫mero como argumento.",
            "Retornar 'fizz' si el n√∫mero es m√∫ltiplo de 3.",
            "Retornar 'buzz' si el n√∫mero es m√∫ltiplo de 5.",
            "Retornar 'fizzbuzz' si el n√∫mero es m√∫ltiplo tanto de 3 como de 5.",
            "Si no cumple ninguna de las condiciones, retornar el n√∫mero como string."
        ],
        soluciones: [
            {
                forma: "1) Primera Soluci√≥n",
                explicacion: "Esta soluci√≥n separa la l√≥gica de verificaci√≥n en dos funciones auxiliares (`esMultiploDeTres` y `esMultiploDeCinco`) para hacer el c√≥digo m√°s modular. Luego, la funci√≥n principal `fizzBuzz` utiliza estas funciones para decidir el resultado final, retornando 'fizz', 'buzz', 'fizzbuzz', o el n√∫mero como string seg√∫n corresponda.",
                metodo: "M√≥dulo (Operador de Resto)",
                link: "https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Operators/Modulo",
                codigo: `
                function esMultiploDeTres(n) {
                    return n % 3 === 0;
                }
    
                function esMultiploDeCinco(n) {
                    return n % 5 === 0;
                }
    
                function fizzBuzz(n) {
                    let Respuesta = "";
                    if (esMultiploDeTres(n) && esMultiploDeCinco(n)) { 
                        Respuesta = "fizzbuzz";
                    } else if (esMultiploDeTres(n)) { 
                        Respuesta = "fizz";
                    } else if (esMultiploDeCinco(n)) { 
                        Respuesta = "buzz";
                    } else {
                        Respuesta = n.toString();
                    }
                    return Respuesta;
                }
                `
            }
        ],
        CasosPrueba: `
        function fizzBuzz(numero)

        // c√≥digo de prueba
        console.log(fizzBuzz(6));  // "fizz"
        console.log(fizzBuzz(20)); // "buzz"
        console.log(fizzBuzz(30)); // "fizzbuzz"
        console.log(fizzBuzz(8));  // "8"
        `
    },
    {
        id: 7,
        nombre: "Contar Rango",
        dificultad: "F√°cil",
        NumeroEjercicio: "Ejercicio 07",
        NombreFuncion: "contarRango",
        descripcion: "Escribir una funci√≥n llamada contarRango que reciba dos n√∫meros y retorne cu√°ntos n√∫meros hay entre ellos, excluyendo los extremos.",
        restricciones: [
            "La funci√≥n se debe llamar contarRango.",
            "La funci√≥n debe recibir dos n√∫meros como argumento.",
            "Retorna la cantidad de n√∫meros que hay entre ambos n√∫meros, excluy√©ndolos."
        ],
        soluciones: [
            {
                forma: "1) Primera Soluci√≥n",
                explicacion: "Esta soluci√≥n usa un ciclo `for` para contar cu√°ntos n√∫meros hay entre los dos valores, excluy√©ndolos. El ciclo empieza en el n√∫mero inmediatamente mayor a `num1` y termina antes de llegar a `num2`.",
                metodo: "Ciclo for",
                link: "https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Statements/for",
                codigo: `
                function contarRango(num1, num2) {
                    let contador = 0;
                    for (let i = num1 + 1; i < num2; i++) {
                        contador++;
                    }
                    return contador;
                }
                `
            },
            {
                forma: "2) Segunda Soluci√≥n",
                explicacion: "En esta soluci√≥n se implementa una f√≥rmula simple que resta los dos n√∫meros y ajusta la diferencia para excluir los extremos. El valor absoluto de la diferencia asegura que la funci√≥n maneje correctamente el orden de los n√∫meros, aunque en el ejercicio se asume que `a` ser√° menor que `b`.",
                metodo: "F√≥rmula matem√°tica",
                link: "https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Math",
                codigo: `
                function contarRango(a , b){
                    let Rango = 0;
                    if(a > b){
                        Rango = (a - b) - 1;
                    } else {
                        Rango = (b - a) - 1;
                    }
                    return Rango;
                }
                `
            }
        ],
        CasosPrueba: `
        // c√≥digo de prueba
        console.log(contarRango(1, 9)); // 7
        console.log(contarRango(1332, 8743)); // 7410
        console.log(contarRango(5, 6)); // 0
        `
    },
    {
        id: 8,
        nombre: "Sumar Rango",
        dificultad: "F√°cil",
        NumeroEjercicio: "Ejercicio 08",
        NombreFuncion: "sumarRango",
        descripcion: "Escribir una funci√≥n llamada sumarRango que reciba dos argumentos: n√∫mero inicial y n√∫mero final. La funci√≥n debe retornar la suma de los n√∫meros en ese rango, incluyendo los extremos.",
        restricciones: [
            "La funci√≥n se debe llamar sumarRango.",
            "La funci√≥n debe recibir dos n√∫meros como argumento.",
            "La suma debe incluir tanto el n√∫mero inicial como el n√∫mero final."
        ],
        soluciones: [
            {
                forma: "1) Primera Soluci√≥n",
                explicacion: "Esta soluci√≥n utiliza un ciclo `for` para recorrer desde el n√∫mero inicial hasta el n√∫mero final, sumando cada valor. Es una soluci√≥n sencilla y efectiva que garantiza que todos los n√∫meros entre el rango, incluidos los extremos, sean sumados.",
                metodo: "Ciclo for",
                link: "https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Statements/for",
                codigo: `
                function sumarRango(num1, num2) {
                    if (num1 === num2) {
                        return 0; // Si ambos n√∫meros son iguales, retornamos 0
                    }
                    
                    let suma = 0;
                    for (let i = num1; i <= num2; i++) {
                        suma += i;
                    }
                    return suma;
                }
                `
            }
        ],
        CasosPrueba: `
        function sumarRango(num1, num2)
        
        // c√≥digo de prueba
        console.log(sumarRango(0, 10)); // 55
        console.log(sumarRango(12, 14)); // 39
        console.log(sumarRango(5, 5)); // 0
        console.log(sumarRango(1, 1)); // 0
        `
    },

    {
        id: 9,
        nombre: "N√∫mero de Aes",
        dificultad: "F√°cil",
        NumeroEjercicio: "Ejercicio 09",
        NombreFuncion: "numeroDeAes",
        descripcion: "Escribir una funci√≥n llamada numeroDeAes que reciba un string y retorne el n√∫mero de veces que aparece la letra 'a'.",
        restricciones: [
            "La funci√≥n se debe llamar numeroDeAes.",
            "La funci√≥n debe recibir un string como argumento.",
            "Debe retornar el n√∫mero de veces que aparece la letra 'a' en la cadena."
        ],
        soluciones: [
            {
                forma: "1) Primera Soluci√≥n",
                explicacion: "Esta soluci√≥n utiliza un ciclo `for` para recorrer el string y cuenta cu√°ntas veces aparece la letra 'a'. El uso de un diccionario (array) es una forma flexible de manejar letras espec√≠ficas, aunque en este caso solo contiene la letra 'a'.",
                metodo: "M√©todo includes()",
                link: "https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Array/includes",
                codigo: `
                function numeroDeAes(palabra) {
                    const Diccionario = ["a"];
                    let contador = 0;
    
                    if (palabra.length > 0) {
                        for (let i = 0; i < palabra.length; i++) {
                            let letra = palabra[i];
                            if (Diccionario.includes(letra)) {
                                contador++;
                            }
                        }
                        return contador;
                    } else {
                        return 0; // Retorna 0 si la palabra est√° vac√≠a
                    }
                }
                `
            }
        ],
        CasosPrueba: `
        function numeroDeAes(palabra)

        // c√≥digo de prueba
        console.log(numeroDeAes("aeiou"));       // 1
        console.log(numeroDeAes("abracadabra")); // 5
        console.log(numeroDeAes("etinol"));      // 0
        console.log(numeroDeAes(""));            // 0
        `
    },
    {
        id: 10,
        nombre: "N√∫mero de Caracteres",
        dificultad: "F√°cil",
        NumeroEjercicio: "Ejercicio 10",
        NombreFuncion: "numeroDeCaracteres",
        descripcion: "Escribir una funci√≥n llamada numeroDeCaracteres que reciba un string y un caracter (un string de un caracter). La funci√≥n debe retornar el n√∫mero de veces que aparece el caracter en el string.",
        restricciones: [
            "La funci√≥n se debe llamar numeroDeCaracteres.",
            "La funci√≥n debe recibir dos argumentos: un string y un caracter.",
            "Debe retornar el n√∫mero de veces que el caracter aparece en el string."
        ],
        soluciones: [
            {
                forma: "1) Primera Soluci√≥n",
                explicacion: "Esta soluci√≥n utiliza un ciclo `for` para recorrer el string y comparar cada car√°cter con el que se busca. Si hay coincidencia, aumenta el contador.",
                metodo: "Ciclo for y comparaci√≥n directa",
                link: "https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Statements/for",
                codigo: `
                function numeroDeCaracteres(Palabra, letra) {
                    let contador = 0;
                    let letraConvertido = String(letra); // Convierte la letra a una cadena
                    
                    // Recorre cada car√°cter de la palabra
                    for (let i = 0; i < Palabra.length; i++) {
                        let letras = Palabra[i];
                        // Compara el car√°cter actual con la letraConvertida
                        if (letras === letraConvertido) {
                            contador++;
                        }
                    }
                    return contador;
                }
                `
            }
        ],
        CasosPrueba: `
        // c√≥digo de prueba
        console.log(numeroDeCaracteres("Hola Mundo", "o")); // 2
        console.log(numeroDeCaracteres("MMMMM", "m")); // 0
        console.log(numeroDeCaracteres("eeee", 'e')); // 4
        `
    },
    {
        id: 11,
        nombre: "Suma de Arreglo",
        dificultad: "F√°cil",
        NumeroEjercicio: "Ejercicio 11",
        NombreFuncion: "sumarArreglo",
        descripcion: "Escribir una funci√≥n llamada sumarArreglo que reciba un arreglo de n√∫meros y retorne la suma de todos los elementos.",
        restricciones: [
            "La funci√≥n se debe llamar sumarArreglo.",
            "La funci√≥n debe recibir un arreglo de n√∫meros como argumento.",
            "Debe retornar la suma de todos los n√∫meros en el arreglo."
        ],
        soluciones: [
            {
                forma: "1) Primera Soluci√≥n",
                explicacion: "Esta soluci√≥n utiliza un bucle for para iterar sobre cada elemento del arreglo, sumando su valor a una variable acumuladora.",
                metodo: "Ciclo for",
                link: "https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Statements/for",
                codigo: `
                    function sumarArreglo(array) {
                        let sumaArray = 0;
                        for (let i = 0; i < array.length; i++) {
                            sumaArray += array[i];
                        }
                        return sumaArray;
                    }
                `
            }
        ],
        CasosPrueba: `
            // C√≥digo de prueba
            console.log(sumarArreglo([3, 1, 2])) // 6
            console.log(sumarArreglo([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])) // 55
            console.log(sumarArreglo([])) // 0
        `
    },

    {
        id: 12,
        nombre: "Multiplicaci√≥n de Arreglo",
        dificultad: "F√°cil",
        NumeroEjercicio: "Ejercicio 12",
        NombreFuncion: "multiplicarArreglo",
        descripcion: "Escribir una funci√≥n llamada multiplicarArreglo que reciba un arreglo de n√∫meros y retorne la multiplicaci√≥n de todos los elementos.",
        restricciones: [
            "La funci√≥n se debe llamar multiplicarArreglo.",
            "La funci√≥n debe recibir un arreglo de n√∫meros como argumento.",
            "Debe retornar la multiplicaci√≥n de todos los n√∫meros en el arreglo."
        ],
        soluciones: [
            {
                forma: "1) Primera Soluci√≥n",
                explicacion: "Esta soluci√≥n usa un bucle for para iterar sobre cada elemento del arreglo, multiplicando su valor por una variable acumuladora inicializada en 1.",
                metodo: "Ciclo for",
                link: "https://lenguajejs.com/fundamentos/bucles-e-iteraciones/bucles-for/",
                codigo: `
                    function multiplicarArreglo(array) {
                        let multiplicador = 1;
                        for (let i = 0; i < array.length; i++) {
                            multiplicador *= array[i];
                        }
                        return multiplicador;
                    }
                `
            }
        ],
        CasosPrueba: `
           function multiplicarArreglo(array)
           
            // C√≥digo de prueba
            console.log(multiplicarArreglo([4, 1, 2, 3])) // 24
            console.log(multiplicarArreglo([1, 2, 3, 4, 5, 6, 7, 8])) // 40320
            console.log(multiplicarArreglo([])) // 1
        `
    },
    {
        id: 13,
        nombre: "Remover Ceros",
        dificultad: "F√°cil",
        NumeroEjercicio: "Ejercicio 13",
        NombreFuncion: "removerCeros",
        descripcion: "Escribir una funci√≥n llamada removerCeros que reciba un arreglo de n√∫meros y retorne un nuevo arreglo excluyendo los ceros (0).",
        restricciones: [
            "La funci√≥n se debe llamar removerCeros.",
            "La funci√≥n debe recibir un arreglo de n√∫meros como argumento.",
            "Debe retornar un nuevo arreglo sin los ceros."
        ],
        soluciones: [
            {
                forma: "1) Primera Soluci√≥n",
                explicacion: "La funci√≥n usa el m√©todo 'filter()' para crear un nuevo arreglo excluyendo los ceros. 'filter()' retorna un nuevo arreglo con los elementos que cumplen con la condici√≥n dada.",
                metodo: "M√©todo filter()",
                link: "https://ed.team/blog/javascript-filtrar-elementos-de-un-array-con-filter",
                codigo: `
                    function removerCeros(array) {
                        return array.filter(numero => numero !== 0);
                    }
                `
            },
            {
                forma: "2) Segunda Soluci√≥n",
                explicacion: "La funci√≥n utiliza un ciclo for para iterar sobre cada n√∫mero en el arreglo y empuja los n√∫meros diferentes de cero a un nuevo arreglo.",
                metodo: "Ciclo for",
                link: "https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Statements/for",
                codigo: `
                    function removerCeros(array) {
                        let NuevoArray = [];
                        for (let i = 0; i < array.length; i++) {
                            if (array[i] > 0) {
                                NuevoArray.push(array[i]);
                            }
                        }
                        return NuevoArray;
                    }
                `
            }
        ],
        CasosPrueba: `
           function removerCeros(array)

            // C√≥digo de prueba
            console.log(removerCeros([0, 1, 0, 2, 0, 3])) // [1, 2, 3]
            console.log(removerCeros([9, 3, 6, 4])) // [9, 3, 6, 4]
            console.log(removerCeros([0, 0, 0])) // []
        `
    },
    {
        id: 14,
        nombre: "Sumar Arreglo con Rango",
        dificultad: "F√°cil",
        NumeroEjercicio: "Ejercicio 14",
        NombreFuncion: "sumarArreglo",
        descripcion: "Escribir una funci√≥n llamada sumarArreglo que reciba un arreglo de n√∫meros, la posici√≥n inicial y la posici√≥n final. La funci√≥n debe retornar la suma de todos los n√∫meros dentro del rango (incluyendo las posiciones inicial y final).",
        restricciones: [
            "La funci√≥n se debe llamar sumarArreglo.",
            "Debe recibir tres argumentos: un arreglo de n√∫meros, una posici√≥n inicial y una posici√≥n final.",
            "Debe sumar solo los n√∫meros dentro del rango (posiciones incluidas)."
        ],
        soluciones: [
            {
                forma: "1) Primera Soluci√≥n",
                explicacion: "Esta implementaci√≥n usa un ciclo `for` para iterar desde la posici√≥n inicial hasta la posici√≥n final, sumando los valores en esas posiciones. Se verifica que las posiciones est√©n dentro del arreglo.",
                metodo: "M√©todo for loop",
                link: "https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Statements/for",
                codigo: `
                    function sumarArreglo(array, posIni, posFin) {
                        let suma = 0;
                        for (let i = posIni; i <= posFin; i++) {
                            suma += array[i];
                        }
                        return suma;
                    }
                `
            },
            {
                forma: "2) Segunda Soluci√≥n",
                explicacion: "Esta implementaci√≥n usa `slice()` para extraer una porci√≥n del arreglo entre las posiciones inicial y final, y luego `reduce()` para sumar los elementos de esa porci√≥n.",
                metodo: "M√©todo slice() + reduce()",
                link: "https://filisantillan.com/bits/slice/",
                codigo: `
                    function sumarArreglo(array, posIni, posFin) {
                        return array.slice(posIni, posFin + 1).reduce((a, b) => a + b, 0);
                    }
                `
            }
        ],
        CasosPrueba: `
            function sumarArreglo(array, posIni, posFin)

            // C√≥digo de prueba
            console.log(sumarArreglo([1, 2, 3], 1, 2)) // 5
            console.log(sumarArreglo([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3, 6)) // 22
            console.log(sumarArreglo([7, 8, 9], 0, 0)) // 7
        `
    },
    
    {
        id: 15,
        nombre: "Transcribir ADN a ARN",
        dificultad: "Intermedio",
        NumeroEjercicio: "Ejercicio 15",
        NombreFuncion: "transcribir",
        descripcion: "Escribir una funci√≥n llamada transcribir que reciba un string representando una cadena de ADN y retorne otro string con su complemento ARN.",
        restricciones: [
            "La funci√≥n debe recibir un string de ADN.",
            "Debe retornar un string que es el complemento ARN del ADN ingresado.",
            "Los complementos de las bases nitrogenadas son: G -> C, C -> G, T -> A, A -> U."
        ],
        soluciones: [
            {
                forma: "1) Primera Soluci√≥n",
                explicacion: "Esta soluci√≥n recorre la cadena de ADN car√°cter por car√°cter, verificando cada base nitrogenada e insertando su complemento correspondiente en el ARN.",
                metodo: "M√©todo b√°sico con condicionales (if-else)",
                link: "https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Statements/if...else",
                codigo: `
                    function transcribir(array) {
                        let ARN = "";
                        for (let i = 0; i < array.length; i++) {
                            if (array[i] === "G") {
                                ARN += "C";
                            } else if (array[i] === "C") {
                                ARN += "G";
                            } else if (array[i] === "T") {
                                ARN += "A";
                            } else if (array[i] === "A") {
                                ARN += "U";
                            } else {
                                ARN += array[i];
                            }
                        }
                        return ARN;
                    }
                `
            },
            {
                forma: "2) Segunda Soluci√≥n",
                explicacion: "En esta soluci√≥n, usamos un objeto de mapeo para asociar cada base nitrogenada con su complemento ARN, lo que hace que el c√≥digo sea m√°s conciso. El uso de un objeto nos permite reducir la cantidad de condicionales.",
                metodo: "M√©todo con objeto de map()",
                link: "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map",
                codigo: `
                    function transcribir(ADN) {
                        const map = {
                            'G': 'C',
                            'C': 'G',
                            'T': 'A',
                            'A': 'U'
                        };
                        let arn = "";
                        for (let i = 0; i < ADN.length; i++) {
                            arn += map[ADN[i]] || ADN[i];
                        }
                        return arn;
                    }
                `
            }
        ],
        CasosPrueba: `
           function transcribir(ADN)

            // C√≥digo de prueba
            console.log(transcribir("ACGT")) // "UGCA"
            console.log(transcribir("ACGTGGTCTTAA")) // "UGCACCAGAAUU"
        `
    },
    {
        id: 16,
        nombre: "Capitalizar primera letra de un string",
        dificultad: "F√°cil",
        NumeroEjercicio: "Ejercicio 16",
        NombreFuncion: "capitalizar",
        descripcion: "Escribir una funci√≥n llamada capitalizar que reciba un string y capitalice la primera letra del string. El resto de la palabra debe permanecer igual.",
        restricciones: [
            "La funci√≥n debe recibir un string.",
            "Debe retornar el mismo string con la primera letra capitalizada."
        ],
        soluciones: [
            {
                forma: "1) Primera Soluci√≥n",
                explicacion: "Esta soluci√≥n verifica si la palabra no est√° vac√≠a, y luego capitaliza la primera letra con el m√©todo `toUpperCase`. Finalmente, concatena el resto de la palabra sin modificarla usando `slice(1)`.",
                metodo: "M√©todo  toUpperCase()",
                link: "https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/String/toUpperCase",
                codigo: `
                    function capitalizar(palabra) {
                        if (palabra.length === 0) {
                            return palabra; // Si el string est√° vac√≠o, se retorna igual
                        }
                        // Capitaliza la primera letra y concatena el resto
                        let nuevaPalabra = palabra[0].toUpperCase() + palabra.slice(1);
                        return nuevaPalabra;
                    }
                `
            }
        ],
        CasosPrueba: `
           function capitalizar(palabra)
           
            // C√≥digo de prueba
            console.log(capitalizar("pedro")); // "Pedro"
            console.log(capitalizar("hola mundo")); // "Hola mundo"
            console.log(capitalizar("")); // ""
        `
    },
    {
        id: 17,
        nombre: "Capitalizar la primera letra de cada palabra",
        dificultad: "F√°cil",
        NumeroEjercicio: "Ejercicio 17",
        NombreFuncion: "capitalizar",
        descripcion: "Escribir una funci√≥n llamada capitalizar que reciba un string y capitalice la primera letra de cada palabra. El resto de las letras en cada palabra deben permanecer en min√∫sculas.",
        restricciones: [
            "La funci√≥n debe recibir un string.",
            "Debe retornar el mismo string con la primera letra de cada palabra capitalizada."
        ],
        soluciones: [
            {
                forma: "1) Primera Soluci√≥n",
                explicacion: "La funci√≥n primero divide la frase en un arreglo de palabras usando `split(' ')`. Luego, en un bucle, convierte la primera letra de cada palabra en may√∫scula y concatena el resto con `slice(1)`. Finalmente, une las palabras usando `join(' ')` para devolver el resultado.",
                metodo: "Metodo split() + join()",
                link: "https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/String/split",
                codigo: `
                    function capitalizar(frase) {
                        if (frase.length === 0) {
                            return frase; // Si la cadena est√° vac√≠a, se retorna igual
                        }
                    
                        // Dividir la frase en palabras
                        let palabras = frase.split(' ');
    
                        // Capitalizar la primera letra de cada palabra
                        for (let i = 0; i < palabras.length; i++) {
                            palabras[i] = palabras[i][0].toUpperCase() + palabras[i].slice(1);
                        }
    
                        // Unir las palabras en una sola cadena
                        return palabras.join(' ');
                    }
                `
            }
        ],
        CasosPrueba: `
            function capitalizar(frase)

            // C√≥digo de prueba
            console.log(capitalizar("hola mundo")); // "Hola Mundo"
            console.log(capitalizar("make it real")); // "Make It Real"
            console.log(capitalizar("")); // ""
        `
    },
    {
        id: 18,
        nombre: "Encontrar el n√∫mero m√°ximo en un arreglo",
        dificultad: "F√°cil",
        NumeroEjercicio: "Ejercicio 18",
        NombreFuncion: "max",
        descripcion: "Escribir una funci√≥n llamada max que reciba un arreglo de n√∫meros y retorne el n√∫mero m√°ximo. Debe hacerlo sin usar el m√©todo Math.max de JavaScript.",
        restricciones: [
            "No se permite el uso del m√©todo Math.max()"
        ],
        soluciones: [
            {
                forma: "1) Primera Soluci√≥n",
                explicacion: "Recorremos el arreglo utilizando un bucle `for`. Comparamos cada n√∫mero con el valor m√°s alto encontrado hasta ese punto (inicializado en 0), y si el n√∫mero actual es mayor, lo actualizamos.",
                metodo: "bucle for, comparaciones",
                link: "https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Statements/for",
                codigo: `
                    function max(array) {
                        let NumeroMayor = 0;
                        for (let i = 0; i < array.length; i++) {
                            if (NumeroMayor < array[i]) {
                                NumeroMayor = array[i];
                            }
                        }
                        return NumeroMayor;
                    }
                `
            },
            {
                forma: "2) Segunda Soluci√≥n (usando Math.max)",
                explicacion: "Usamos el operador de propagaci√≥n (`...`) para expandir los elementos del array y pasarlos como argumentos a `Math.max`.",
                metodo: "Metodo Math.max()",
                link: "https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Math/max",
                codigo: `
                    function max(array) {
                        return Math.max(...array); // Usamos el operador spread para descomponer el arreglo
                    }
                `
            }
        ],
        CasosPrueba: `
            function max(array)

            // C√≥digo de prueba
            console.log(max([3, 9, 6])) // 9
            console.log(max([67, 35, 54, 26])) // 67
            console.log(max([5, 9, 2, 4, 5, 7])) // 9
        `
    },
    {
        id: 19,
        nombre: "Encontrar el n√∫mero m√≠nimo en un arreglo",
        dificultad: "F√°cil",
        NumeroEjercicio: "Ejercicio 19",
        NombreFuncion: "min",
        descripcion: "Escribir una funci√≥n llamada min que reciba un arreglo de n√∫meros y retorne el n√∫mero m√≠nimo sin usar el m√©todo Math.min de JavaScript.",
        restricciones: [
            "No se permite el uso del m√©todo Math.min()."
        ],
        soluciones: [
            {
                forma: "1) Primera Soluci√≥n",
                explicacion: "Inicializamos la variable `NumeroMenor` con el primer elemento del arreglo. Luego recorremos el arreglo con un bucle `for`, comparando cada n√∫mero con `NumeroMenor`, y actualizamos si encontramos un n√∫mero menor.",
                metodo: "bucle for, comparaciones",
                link: "https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Statements/for",
                codigo: `
                    function min(array) {
                        let NumeroMenor = array[0]; // Inicializar con el primer elemento del array
                        for (let i = 0; i < array.length; i++) {
                            if (NumeroMenor > array[i]) {
                                NumeroMenor = array[i]; // Actualizar si encontramos un n√∫mero menor
                            }
                        }
                        return NumeroMenor;
                    }
                `
            },
            {
                forma: "2) Segunda Soluci√≥n",
                explicacion: "Utilizamos el m√©todo `Math.min` con el operador de propagaci√≥n para encontrar el n√∫mero m√≠nimo del arreglo. Este m√©todo devuelve el valor m√≠nimo entre los argumentos proporcionados.",
                metodo: "Metodo Math.min()",
                link: "https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Math/min",
                codigo: `
                    function min(array) {
                        return Math.min(...array); // Usamos el operador spread para descomponer el arreglo
                    }
                `
            }
        ],
        CasosPrueba: `
            function min(array)
            
            // C√≥digo de prueba
            console.log(min([3, 9, 6])) // 3
            console.log(min([67, 35, 54, 26])) // 26
            console.log(min([5, 9, 2, 4, 5, 7])) // 2
        `
    },
    {
        id: 20,
        nombre: "Transformar una cadena en una contrase√±a segura",
        dificultad: "F√°cil",
        NumeroEjercicio: "Ejercicio 20",
        NombreFuncion: "password",
        descripcion: "Escribir una funci√≥n llamada password que reciba un string y retorne un nuevo string realizando cambios espec√≠ficos en el formato.",
        restricciones: [
            "El string de entrada puede contener espacios y caracteres especiales."
        ],
        soluciones: [
            {
                forma: "1) Primera Soluci√≥n",
                explicacion: "Utiliza un objeto de mapeo para reemplazar los caracteres espec√≠ficos. Se recorre la cadena, se convierten las letras a min√∫sculas, se eliminan los espacios y se reemplazan los caracteres seg√∫n el mapeo.",
                metodo: "bucle for, mapeo de caracteres",
                link: "https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Statements/for",
                codigo: `
                    function password(contrase√±a) {
                        const map = {
                            'a': '4',
                            'e': '3',
                            'i': '1',
                            'o': '0'
                        };
                        
                        let passwordWin = "";
                        for (let i = 0; i < contrase√±a.length; i++) {
                            let char = contrase√±a[i].toLowerCase(); // Convertir a min√∫scula
                            if (char !== ' ') {  // Ignorar los espacios
                                passwordWin += map[char] || char; // Reemplazar seg√∫n el mapeo
                            }
                        }
                        
                        return passwordWin;
                    }
                `
            },
            {
                forma: "2) Segunda Soluci√≥n",
                explicacion: "Utiliza el m√©todo `replace` de las cadenas junto con expresiones regulares para realizar los reemplazos de caracteres en una sola l√≠nea. Primero convierte toda la cadena a min√∫sculas y elimina los espacios usando `replace`.",
                metodo: "Metodo replace()",
                link: "https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/String/replace",
                codigo: `
                    function password(contrase√±a) {
                        return contrase√±a
                            .toLowerCase() // Convertir a min√∫sculas
                            .replace(/ /g, '') // Eliminar espacios
                            .replace(/a/g, '4')
                            .replace(/e/g, '3')
                            .replace(/i/g, '1')
                            .replace(/o/g, '0');
                    }
                `
            }
        ],
        CasosPrueba: `
            function password(contrase√±a)

            // C√≥digo de prueba
            console.log(password("hola")); // "h0l4"
            console.log(password("esta es una prueba")); // "3st43sun4pru3b4"
            console.log(password("")); // ""
        `
    },
    {
        id: 21,
        nombre: "Filtrar n√∫meros pares de un arreglo",
        dificultad: "F√°cil",
        NumeroEjercicio: "Ejercicio 21",
        NombreFuncion: "pares",
        descripcion: "Escribir una funci√≥n llamada pares que reciba un arreglo de n√∫meros y retorne un nuevo arreglo con los n√∫meros pares √∫nicamente.",
        restricciones: [
            "El arreglo de entrada puede contener n√∫meros negativos y positivos.",
            "El arreglo de entrada no debe estar vac√≠o."
        ],
        soluciones: [
            {
                forma: "1) Primera Soluci√≥n",
                explicacion: "Utiliza un bucle `for` para recorrer el arreglo y verifica si cada n√∫mero es par. Si lo es, se a√±ade al nuevo arreglo de n√∫meros pares.",
                metodo: "bucle for, comprobaci√≥n de paridad",
                link: "https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Statements/for",
                codigo: `
                    function pares(array) {
                        let ArrayPares = [];
                        for (let i = 0; i < array.length; i++) {
                            if (array[i] % 2 === 0) {
                                ArrayPares.push(array[i]);
                            }
                        }
                        return ArrayPares;
                    }
                `
            },
            {
                forma: "2) Segunda Soluci√≥n",
                explicacion: "Utiliza el m√©todo `filter` para crear un nuevo arreglo que contenga solo los n√∫meros pares. Este m√©todo es m√°s conciso y legible.",
                metodo: "Metodo filter()",
                link: "https://ed.team/blog/javascript-filtrar-elementos-de-un-array-con-filter",
                codigo: `
                    function pares(array) {
                        return array.filter(num => num % 2 === 0);
                    }
                `
            }
        ],
        CasosPrueba: `
            function pares(array)

            // C√≥digo de prueba
            console.log(pares([1, 2, 3, 4, 5, 6])); // [2, 4, 6]
            console.log(pares([])); // []
        `
    }
    
    
    
    
    

    
    


    
    
    

    ]